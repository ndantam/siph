SIPHBUILD
=========

Siph fetches, builds, tests, and installs packages.  It can operate
both in the local root filesystem or under a chroot to test multiple
OS distributions.

Compared to traditional package managers, Siph eschews tarballs and
patches, instead operating directly on upstream git repositories.
Directly using the upstream repository reduces network usage for
updates and eases local source code modification.

SETUP
=====

Installing Packages Locally
---------------------------

1. Create a siph directory:

    `mkdir ~/.siph`

2. Get the siph repo install script and config file:

    - `cd ~/.siph && git clone https://github.com/ndantam/siph.git`
    - `cp ~/.siph/siph/config.example ~/.siph/config`
    - `sudo cp ~/.siph/siph/siph /usr/local/bin`

3. Get the siph package repo:

    `cd ~/.siph && git clone https://github.com/ndantam/siph-pkg.git`

4. Install something:

    `sudo siph install ompl`


Testing Packaging in Different Roots
------------------------------------

(skip this part if you only want to install packages locally)

Siph can manage multiple OS distributions to test packages on
different platforms.  Distributions roots are stored via BTRFS,
enabling low-cost snapshots for new tests.

1. Create a BTRFS volume for SIPH to use.  For example, if using LVM:

    - `lvcreate --size 40G --name siph myvg`
    - `mkfs -t btrfs /dev/mapper/myvg-siph`

2. Mount the volume group (and/or add suitable line to /etc/fstab)

    - `mkdir /var/cache/siph`
    - `mount /dev/mapper/myvg-siph /var/cache/siph`

3. Create a distribution

    `siph mkdist debian jessie`


SIPH Files
===========

Configure Variables
------------------

The files `/etc/siph/config` and `~/.siph/config` are sourced as shell
scripts by the `siph` driver script.  See `./config.example` for a
description of the variables.

Package Variables
-----------------

Follow naming convention `SIPH_PKG_*`.  Set in the .siph file

* `SIPH_PKG_NAME`: Name of the package
* `SIPH_PKG_REPO`: Package repository URL
* `SIPH_PKG_BRANCH`: Package branch to use
* `SIPH_PKG_DEPS_DEB`: Debian (DEB) dependencies of the package
* `SIPH_PKG_DEPS_SIPH`: Siph dependencies of the package

Build Variables
---------------

Follow naming convention `SIPH_BLD_*`.  Set by the main siph script.

* `SIPH_BLD_SRCDIR`: top-level source directory
* `SIPH_BLD_BUILDDIR`: top-level build directory
* `SIPH_BLD_DESTDIR`: destination directory
* `SIPH_BLD_PREFIX`: installation prefix

Functions
---------

* `siph_pkg_deps()`: install any dependencies
* `siph_pkg_configure()`: configures the package
* `siph_pkg_compile()`: compiles the package
* `siph_pkg_test()`: test the package


FAQ
===

Similar Programs
----------------

* Q: Why not use APT/DEB?

  A:
  - APT/DEB alone does not handle testing on multiple
    platforms/distributions.
  - APT/DEB packages are a poor fit when runtime-specific package
    managers are involved, e.g., Common Lisp's quicklisp and Python's
    Distutils.
  - APT/DEB packages are somewhat heavyweight to create, in both
    programmer and machine resources.

* Q: Why not use Travis CI?

  A: Travis CI does not handle dependency chains between packages,
  except via APT.

ETYMOLOGY
=========
https://en.wikipedia.org/wiki/Sisyphus
