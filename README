SIPHBUILD
=========

Siph fetches, builds, tests, and installs packages.  It can operate
both in the local root filesystem or under a chroot to test multiple
OS distributions.


SETUP
=====

1. Create a BTRFS volume for SIPH to use.  For example, if using LVM:

    `lvcreate --size 40G --name siph myvg`

    `mkfs -t btrfs /dev/mapper/myvg-siph`

2. Mount the volume group (and/or add suitable line to /etc/fstab)

    `mkdir /var/cache/siph`

    `mount /dev/mapper/myvg-siph /var/cache/siph`

3. Create a distribution

    `siph mkdist debian jessie`


.SIPH Files
===========

Package Variables
-----------------

Follow naming convention `SIPH_PKG_*`.  Set in the .siph file

* `SIPH_PKG_NAME`: Name of the package
* `SIPH_PKG_REPO`: Package repository URL
* `SIPH_PKG_BRANCH`: Package branch to use

Build Variables
---------------

Follow naming convention `SIPH_BLD_*`.  Set by the main siph script.

* `SIPH_BLD_SRCDIR`: top-level source directory
* `SIPH_BLD_BUILDDIR`: top-level build directory
* `SIPH_BLD_DESTDIR`: destination directory
* `SIPH_BLD_PREFIX`: installation prefix

Functions
---------

* `siph_pkg_deps()`: install any dependencies
* `siph_pkg_configure()`: configures the package
* `siph_pkg_compile()`: compiles the package
* `siph_pkg_test()`: test the package


FAQ
===

Similar Programs
----------------

* Q: Why not use APT/DEB?

  A:
  - APT/DEB alone does not handle testing on multiple
    platforms/distributions.
  - APT/DEB packages are a poor fit when runtime-specific package
    managers are involved, e.g., Common Lisp's quicklisp and Python's
    Distutils.
  - APT/DEB packages are somewhat heavyweight to create, in both
    programmer and machine resources.

* Q: Why not use Travis CI?

  A: Travis CI does not handle dependency chains between packages,
  except via APT.

ETYMOLOGY
=========
https://en.wikipedia.org/wiki/Sisyphus
