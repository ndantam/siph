#!/bin/sh

## VARS ##

SIPH_ROOT=/var/cache/siph
SIPH_MIRROR_DEBIAN=https://mirrors.kernel.org/debian
SIPH_MIRROR_UBUNTU=http://archive.ubuntu.com/ubuntu/
SIPH_SCRIPT="$0"



SIPH_DEFAULT_REPODIR="$SIPH_ROOT/repo"
SIPH_DEFAULT_WORKDIR="$SIPH_ROOT/work"
SIPH_DEFAULT_CCACHE_DIR="$SIPH_ROOT/ccache"
SIPH_DEFAULT_DBDIR="$SIPH_ROOT/db"
SIPH_DEFAULT_PKGDIR="/siph-pkg"

SIPH_REPODIR="$SIPH_DEFAULT_REPODIR"
SIPH_WORKDIR="$SIPH_DEFAULT_WORKDIR"
SIPH_DBDIR="$SIPH_DEFAULT_DBDIR"
SIPH_PKGDIR="$SIPH_DEFAULT_PKGDIR"
SIPH_CCACHE_DIR="$SIPH_DEFAULT_CCACHE_DIR"


SIPH_PREFIX=/usr/local

SIPH_MAKE_J=2

# enable ccache if we can
SIPH_ORIGINAL_PATH="$PATH"
if [ -d /usr/lib/ccache/ ]; then
    export PATH="/usr/lib/ccache/:$PATH"
fi

## HELPERS ##

siph_err()  {
    echo "SIPH ERROR: $1"
    exit 1
}

siph_msg() {
    echo "SIPH: $1"
}

siph_debug() {
    echo "SIPH DEBUG: $1"
}

siph_dist_root() {
    SIPH_DIST_NAME="$1"; shift
    SIPH_DIST_ROOT="$SIPH_ROOT/dists/${SIPH_DIST_NAME}"
    SIPH_TMP_ROOT="$SIPH_ROOT/tmp/${SIPH_DIST_NAME}"
}


siph_distcommand() {
    siph_msg "Chrooting into $SIPH_DIST_NAME"
    chroot "$SIPH_DIST_ROOT" /bin/sh -c "$1"
}

siph_tmpcommand() {
    siph_msg "Chrooting into $SIPH_DIST_NAME"
    chroot "$SIPH_TMP_ROOT" /bin/sh -c "CCACHE_DIR='$SIPH_DEFAULT_CCACHE_DIR' $1"
}

## COMMANDS ##


siph_tmpclone()
{
    siph_dist_root $@
    if [ -d "$SIPH_TMP_ROOT" ] ; then
        siph_err "ERROR: tmp directory '$SIPH_TMP_ROOT' already exists"
    fi
    mkdir -p "$SIPH_ROOT/tmp"
    mkdir -p "$SIPH_ROOT/ccache"
    btrfs subvolume snapshot "$SIPH_DIST_ROOT" "$SIPH_TMP_ROOT" || siph_err "Could not clone '$SIPH_DIST_ROOT'"
    mount -o bind /proc "$SIPH_TMP_ROOT/proc"

    if [ -d "$SIPH_PKGDIR" ]; then
        mkdir "$SIPH_TMP_ROOT/siph-pkg"
        mount -o bind,ro "$SIPH_PKGDIR" "$SIPH_TMP_ROOT/siph-pkg"
    fi

    if [ -d "$SIPH_CCACHE_DIR" ]; then
        mkdir -p "$SIPH_TMP_ROOT/$SIPH_DEFAULT_CCACHE_DIR"
        mount -o bind "$SIPH_CCACHE_DIR" "$SIPH_TMP_ROOT/$SIPH_DEFAULT_CCACHE_DIR"
    fi


    cp "$SIPH_SCRIPT" "$SIPH_TMP_ROOT"
    echo "$SIPH_TMP_ROOT"
}

siph_tmpclean()
{
    for SIPH_TMP_ROOT in $SIPH_ROOT/tmp/*; do
        if [ -d "$SIPH_TMP_ROOT" ] ; then
            umount "$SIPH_TMP_ROOT/proc"
            if [ -d "$SIPH_TMP_ROOT/siph-pkg" ]; then
                umount "$SIPH_TMP_ROOT/siph-pkg"
            fi
            btrfs subvolume delete "$SIPH_TMP_ROOT"
        fi
    done
}

siph_rmdist()
{
    siph_dist_root $@
    btrfs subvolume delete "$SIPH_DIST_ROOT"
}


siph_update()
{
    for SIPH_DIST_ROOT in $SIPH_ROOT/dists/*; do
        siph_distcommand "apt-get update && apt-get -yudist-upgrade"
    done
}


siph_distinstall()
{
    siph_dist_root $@; shift;
    siph_distcommand "apt-get install $*"
}


siph_mkdist()
{
    SIPH_TYPE="$1"; shift
    SIPH_RELEASE="$1"; shift
    if test -z "$1"; then
        SIPH_DIST_NAME="${SIPH_TYPE}_${SIPH_RELEASE}"
    else
        SIPH_DIST_NAME="$1";shift
    fi
    siph_dist_root "$SIPH_DIST_NAME"
    siph_msg "Creating '$SIPH_TYPE' '$SIPH_RELEASE' as '$SIPH_DIST_NAME'"

    #SIPH_MIRROR="$1"
    mkdir -p "$SIPH_ROOT/dists"
    btrfs subvolume create "$SIPH_DIST_ROOT" || siph_err "Could not create distribution volume"
    case $SIPH_TYPE in
        debian)
            echo debootstrap "$SIPH_RELEASE" "$SIPH_DIST_ROOT" "$SIPH_MIRROR_DEBIAN"
            debootstrap "$SIPH_RELEASE" "$SIPH_DIST_ROOT" "$SIPH_MIRROR_DEBIAN"
            ;;
        ubuntu)
            debootstrap "$SIPH_RELEASE" "$SIPH_DIST_ROOT" "$SIPH_MIRROR_UBUNTU"
            ;;
        *)
            siph_error "Unknown distribution type: $SIPH_TYPE"
            ;;
    esac
}

siph_cpdist() {
    btrfs subvolume snapshot "$SIPH_ROOT/dists/$1" "$SIPH_ROOT/dists/$2" || \
        siph_err "Could not copy dist"
}

siph_lsdist() {
    ls $@ "$SIPH_ROOT/dists"
}

## Build Wrapers

siph_bld_deps() {
    siph_msg "DEPS"
    cd "$SIPH_BLD_BUILDDIR"
    siph_pkg_deps || siph_err "Package dependencies failed"
}

siph_bld_fetch() {
    siph_msg "FETCH"
    cd "$SIPH_BLD_BUILDDIR"
    siph_pkg_fetch || siph_err "Package fetch failed"
}

siph_bld_configure() {
    siph_msg "CONFIGURE"
    cd "$SIPH_BLD_BUILDDIR"
    siph_pkg_configure || siph_err "Package configure failed"
}

siph_bld_compile() {
    siph_msg "COMPILE"
    cd "$SIPH_BLD_BUILDDIR"
    siph_pkg_compile || siph_err "Package compile failed"
}

siph_bld_test() {
    siph_msg "TEST"
    cd "$SIPH_BLD_BUILDDIR"
    siph_pkg_test || siph_err "Package test failed"
}


siph_install_dir() {
    if test '!' -d "/$1"; then
        mkdir -v "/$1"
        echo "$1" >> "$SIPH_BLD_DBDIR/newdirs"
    fi
}

siph_install_file() {
    dir=`dirname "$1"`
    siph_install_dir "$dir"
    cp -av "$1" "/$1"
    echo "$1" >> "$SIPH_BLD_DBDIR/newfiles"
}

siph_bld_install() {
    siph_msg "INSTALL"
    if test -e "$SIPH_BLD_DESTDIR"; then
        siph_err "Destination directory '$SIPH_BLD_DESTDIR' already exists"
    fi
    mkdir -p "$SIPH_BLD_DESTDIR"
    siph_pkg_install || siph_err "Package install failed"

    # Record files
    mkdir -p "$SIPH_BLD_DBDIR"

    # TODO: handle merging over installed package
    # TODO: track created directories

    ## install into filesystem
    touch "$SIPH_BLD_DBDIR/newfiles"
    touch "$SIPH_BLD_DBDIR/newdirs"
    (cd "$SIPH_BLD_DESTDIR" && find) | ( \
        cd "$SIPH_BLD_DESTDIR"
        while read -r file; do \
            if test -d "$file"; then \
                siph_install_dir "$file"; \
            else  \
                siph_install_file "$file"; \
            fi ; \
        done \
    )
    mv "$SIPH_BLD_DBDIR/newfiles" "$SIPH_BLD_DBDIR/files"
    mv "$SIPH_BLD_DBDIR/newdirs" "$SIPH_BLD_DBDIR/dirs"
}

siph_bld_source() {
    if test -z "$1"; then
        return;
    fi

    # Locate file
    SIPH_SPEC="$1"; shift;
    repo_base=""
    if test -f "$SIPH_SPEC/.siph"; then
        # Explicit repo
        SIPH_FILE="$SIPH_SPEC/.siph"
        SIPH_BLD_SRCDIR="$SIPH_SPEC"
        SIPH_BLD_BUILDDIR="$SIPH_SPEC"
    elif (echo "$SIPH_SPEC" |  grep 'https\?:\/\/.*' > /dev/null); then
        # Remote Repo
        siph_msg "Syncing repo '$SIPH_SPEC'"
        repo_base=`echo "$SIPH_SPEC" | sed -e 's!.*/\([^/.]*\)\(.git\)\?!\1!'`
        if test -e "$SIPH_REPODIR/$repo_base"; then
            cd "$SIPH_REPODIR/$repo_base"
            git pull || siph_err "Could not pull"
        else
            cd "$SIPH_REPODIR"
            git clone "$SIPH_SPEC" || siph_err "Could not clone repo"
        fi
        SIPH_BLD_SRCDIR="$SIPH_REPODIR/$repo_base"
        SIPH_BLD_BUILDDIR="$SIPH_REPODIR/$repo_base"
        SIPH_FILE="$SIPH_BLD_SRCDIR/.siph"
    else
        # Package name
        # Search package path for file
        rest="$SIPH_PKGDIR"
        while test "x" != "x$rest" -a '!' -f "$SIPH_FILE"; do
            first=`echo $rest | sed -e 's/^:\?\([^:]*\)\(:\(.*\)\)\?/\1/'`
            rest=`echo $rest  | sed -e 's/^:\?\([^:]*\)\(:\(.*\)\)\?/\2/'`
            SIPH_FILE="$first"/"$SIPH_SPEC".siph
        done
        SIPH_BLD_SRCDIR="$SIPH_REPODIR/$SPEC"
        SIPH_BLD_BUILDDIR="$SIPH_REPODIR/$SPEC"
    fi

    # Did we find it?
    if test '!' -f "$SIPH_FILE"; then
       siph_err "Could not find package $SIPH_SPEC"
    fi

    # Canonicalize paths
    SIPH_FILE=`realpath "$SIPH_FILE"`
    SIPH_BLD_SRCDIR=`realpath "$SIPH_BLD_SRCDIR"`
    SIPH_BLD_BUILDDIR=`realpath "$SIPH_BLD_BUILDDIR"`

    . "$SIPH_FILE" || siph_err "Could not source '$SIPH_FILE'"

    test -n "$SIPH_PKG_NAME" || siph_err "No package name"
    test -n "$SIPH_PKG_REPO" || siph_err "No package repo"
    test -n "$SIPH_PKG_BRANCH" || siph_err "No package branch"

    if test -n "$repo_base"; then
        test "x$repo_base" = "x$SIPH_PKG_NAME" || \
            siph_err "Mismatched repo basename ($repo_base) and package name ($SIPH_PKG_NAME)"
    fi

    SIPH_BLD_PREFIX="$SIPH_PREFIX"
    SIPH_BLD_WORKDIR="$SIPH_WORKDIR/$SIPH_PKG_NAME"
    SIPH_BLD_DESTDIR="$SIPH_BLD_WORKDIR/dest"
    SIPH_BLD_DBDIR="$SIPH_DBDIR/$SIPH_PKG_NAME"
}

siph_testpkg() {
    siph_bld_source $@
    siph_bld_deps
    siph_bld_fetch
    siph_bld_configure
    siph_bld_compile
    siph_bld_test
}

siph_test() {
    # clone the distro
    siph_tmpclone $@ || siph_err "Could not clone distro"
    shift

    # get sources in original root
    siph_bld_source $@
    here=`pwd`
    siph_bld_fetch
    cd "$here"

    # clone sources to tmp
    siph_msg "srcdir: $SIPH_BLD_SRCDIR"
    mkdir -p "${SIPH_TMP_ROOT}/${SIPH_DEFAULT_REPODIR}"
    git clone "$SIPH_BLD_SRCDIR" "${SIPH_TMP_ROOT}/${SIPH_DEFAULT_REPODIR}/${SIPH_PKG_NAME}"

    # Chroot and test
    siph_msg "Chrooting into temporary $SIPH_DIST_NAME"
    # TODO: this looks gross
    if [ -f "$SIPH_BLD_SRCDIR/.siph" ]; then
        # native siph package
        siph_tmpcommand "/siph testpkg ${SIPH_DEFAULT_REPODIR}/${SIPH_PKG_NAME}"
    else
        # using specific siph file
        siph_tmpcommand "/siph testpkg $@"
    fi

    siph_tmpclean
}


siph_uninstall() {
    siph_msg "UNINSTALL"

    SIPH_PKG_NAME="$1"
    SIPH_BLD_DBDIR="$SIPH_DBDIR/$SIPH_PKG_NAME"

    if test -d "$SIPH_BLD_DBDIR"; then
        . "$SIPH_BLD_DBDIR/siph"
    else
        siph_err "package '$SIPH_PKG_NAME' not installed"
    fi

    # Remove files
    ( \
        while read -r file; do \
            rm -v "/$file"; \
        done \
    ) < "$SIPH_BLD_DBDIR/files"

    # Remove directory
    tac "$SIPH_BLD_DBDIR/dirs" | ( \
        while read -r file; do \
            rmdir -v "/$file"; \
        done \
    )

    # Remove package entry
    rm -r "$SIPH_BLD_DBDIR"
}


siph_install()
{
    siph_bld_source "$1"

    # build and install
    siph_testpkg
    siph_bld_install


    cp "$SIPH_FILE" "$SIPH_BLD_DBDIR/siph"

    rm -r "$SIPH_BLD_WORKDIR"
}


## Portability Functions

siph_apt_get () {
    if test -n `which apt-get` ; then
        if test 0 = `id -u`; then
            apt-get $@
        else
            echo "Not root, skipping apt-get install"
        fi
    fi
}

siph_apt_install () {
    siph_apt_get -y install $@
}

siph_install_base () {
    siph_apt_get -y build-essential \
                 autoconf automake autotools libtool \
                 ccache \
                 cmake \
                 sbcl curl
}


siph_find_quicklisp ()
{
    if test -d "$HOME/quicklisp"; then
        SIPH_QUICKLISP="$HOME/quicklisp"
    elif test -d "$HOME/.quicklisp"; then
        SIPH_QUICKLISP="$HOME/.quicklisp"
    elif test -d "$HOME/Quicklisp"; then
        SIPH_QUICKLISP="$HOME/Quicklisp"
    elif test -d "$SIPH_PREFIX/quicklisp"; then
        SIPH_QUICKLISP="$SIPH_PREFIX/quicklisp"
    fi

}

siph_install_quicklisp () {
    siph_find_quicklisp
    if test '!' -e "$SIPH_QUICKLISP"; then
        file=`tempfile`
        curl -o "$file" "https://beta.quicklisp.org/quicklisp.lisp" || siph_err "Could not fetch quicklisp"
        sbcl --script <<EOF
(load "$file")
(quicklisp-quickstart:install :path "$SIPH_PREFIX/quicklisp")
EOF
        rm "$file"
    fi
    siph_find_quicklisp
}

## Package Helpers

siph_deps_deb()
{
    if [ -n "$SIPH_PKG_DEPS_DEB" ]; then
        siph_apt_install $SIPH_PKG_DEPS_DEB
    fi
}


## Build Stubs

SIPH_PKG_BRANCH="master"

siph_pkg_fetch() {
    # SIPH_BLD_SRCDIR=`pwd`
    # SIPH_BLD_BUILDDIR=`pwd`
    true
}

siph_pkg_deps()
{
    siph_deps_deb
}

siph_pkg_configure()
{
    if test -f "$SIPH_BLD_SRCDIR/configure.ac"; then
        autoreconf -i && "$SIPH_BLD_SRCDIR/configure" --prefix="$SIPH_BLD_PREFIX"
    elif test -f "$SIPH_BLD_SRCDIR/CMakeLists.txt"; then
        cmake "$SIPH_BLD_SRCDIR" -DCMAKE_INSTALL_PREFIX="$SIPH_BLD_PREFIX"
    fi
}

siph_pkg_compile()
{
    if test -f Makefile; then
        make -j "$SIPH_MAKE_J"
    fi
}

siph_pkg_test() { true; }

siph_pkg_install()
{
    make install DESTDIR="$SIPH_BLD_DESTDIR"
}


## Build Helpers
siph_workdir () {
    mkdir -p
}

siph_fetch_git () {
    mkdir -p "$SIPH_REPODIR"
    repo="$SIPH_REPODIR/$SIPH_PKG_NAME"
    if [ -d "$repo" ]; then
        # TODO: check if repo URL has changed
        siph_msg "Updating '$repo'"
        cd "$repo"
        git fetch && git checkout "$SIPH_PKG_BRANCH"
    else
        siph_msg "Cloning '$SIPH_PKG_REPO'"
        git clone "$SIPH_PKG_REPO" "$repo" || siph_err "Could not clone '$SIPH_PKG_REPO"
        cd "$repo" && git checkout "$SIPH_PKG_BRANCH" || siph_err "Could not checkout '$SIPH_PKG_BRANCH'"
    fi

    SIPH_BLD_SRCDIR="$repo"
    SIPH_BLD_BUILDDIR="$repo"
}



## Config files ##

siph_load_conf()
{
    if test -f "$1"; then
        . "$1"
    fi
}


siph_load_conf /etc/siph
siph_load_conf /etc/siph/config
siph_load_conf ~/.config/siph
siph_load_conf ~/.siph/config


## DISPATCH ##
SIPH_CMD="$1"; shift

if [ -z "$SIPH_CMD" ] ; then
    siph_err "No command given"
fi



case "$SIPH_CMD" in
    mkdist)
        siph_mkdist $@
        ;;
    cpdist)
        siph_cpdist $@
        ;;
    rmdist)
        siph_rmdist $@
        ;;
    lsdist)
        siph_lsdist $@
        ;;
    update)
        siph_update $@
        ;;
    distinstall)
        siph_distinstall $@
        ;;
    tmp)
        siph_tmpclone $@
        ;;
    clean)
        siph_tmpclean $@
        ;;
    testpkg)
        siph_testpkg $@
        ;;
    test)
        siph_test $@
        ;;
    install)
        siph_install $@
        ;;
    uninstall)
        siph_uninstall $@
        ;;
    nop)
        true
        ;;
    help)
        echo "Usage: siph COMMAND"
        echo ""
        echo "  DISTRIBUTION MANAGEMENT:"
        echo "  ======================="
        echo "    siph mkdist OS RELEASE [DISTRIBUTION]"
        echo "        Create a root directory tree"
        echo "    siph rmdist DISTRIBUTION"
        echo "        Delete a root directory tree"
        echo "    siph cpdist SOURCE_DISTRIBUTION DEST_DISTRIBUTION"
        echo "        Copy a distribution"
        echo "    siph lsdist"
        echo "        List distributions"
        echo "    siph update DISTRIBUTION"
        echo "        Update a root directory tree"
        echo "    siph distinstall DISTRIBUTION packages..."
        echo "        Install packages in a root directory tree"
        echo "    siph tmp DISTRIBUTION"
        echo "        Create a temporary clone of a root tree"
        echo "    siph clean"
        echo "        Remove all temporary root clones"
        echo ""
        echo "  PACKAGE TESTING:"
        echo "  ================"
        echo "    siph test DISTRIBUTION PACKAGE"
        echo "        Build and test REPO in root"
        echo ""
        echo "  PACKAGE MANAGEMENT:"
        echo "  ==================="
        echo "    siph install PACKAGE"
        echo "        Install PACKAGE"
        ;;
    *)
        siph_err "Invalid Command '$SIPH_CMD'"
        ;;
esac
