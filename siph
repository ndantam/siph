#!/bin/sh

## VARS ##

SIPH_ROOT=/var/cache/siph
SIPH_MIRROR_DEBIAN=https://mirrors.kernel.org/debian
SIPH_MIRROR_UBUNTU=http://archive.ubuntu.com/ubuntu/
SIPH_SCRIPT="$0"



SIPH_DEFAULT_REPODIR="$SIPH_ROOT/repo"
SIPH_DEFAULT_WORKDIR="$SIPH_ROOT/work"
SIPH_DEFAULT_CCACHE_DIR="$SIPH_ROOT/ccache"
SIPH_DEFAULT_DBDIR="$SIPH_ROOT/db"
SIPH_DEFAULT_PKGDIR="/siph-pkg"

SIPH_REPODIR="$SIPH_DEFAULT_REPODIR"
SIPH_WORKDIR="$SIPH_DEFAULT_WORKDIR"
SIPH_DBDIR="$SIPH_DEFAULT_DBDIR"
SIPH_PKGDIR="$SIPH_DEFAULT_PKGDIR"
SIPH_CCACHE_DIR="$SIPH_DEFAULT_CCACHE_DIR"

test -n "$SIPH_OPT_FETCH"         || SIPH_OPT_FETCH=yes
test -n "$SIPH_OPT_REINSTALL"     || SIPH_OPT_REINSTALL=no
test -n "$SIPH_OPT_MAKE_BIN"      || SIPH_OPT_MAKE_BIN=no
test -n "$SIPH_OPT_USE_BIN"       || SIPH_OPT_USE_BIN=yes
test -n "$SIPH_OPT_RECURSIVE"     || SIPH_OPT_RECURSIVE=no
test -n "$SIPH_OPT_QUIET"         || SIPH_OPT_QUIET=no
test -n "$SIPH_OPT_USER"          || SIPH_OPT_USER=""

SIPH_PREFIX=/usr/local

SIPH_MAKE_J=2

# enable ccache if we can
SIPH_ORIGINAL_PATH="$PATH"
if [ -d /usr/lib/ccache/ ]; then
    export PATH="/usr/lib/ccache/:$PATH"
fi

## HELPERS ##

siph_err()  {
    echo "SIPH ERROR: $1" 1>&2
    echo "pwd: `pwd`"  1>&2
    echo "user: `id -un`" 1>&2
    exit 1
}

siph_msg() {
    if [ no = "$SIPH_OPT_QUIET" ]; then
        echo "SIPH: $1"
    fi
}

siph_debug() {
    if [ no = "$SIPH_OPT_QUIET" ]; then
        echo "SIPH DEBUG: $1"
    fi
}

siph_dist_root() {
    SIPH_DIST_NAME="$1"; shift
    SIPH_DIST_ROOT="$SIPH_ROOT/dists/${SIPH_DIST_NAME}"
}

siph_xargs() {
    # POSIX xargs behaves badly on empty files
    (while read -r arg; do
         $@ "$arg" < /dev/null
     done)
}

siph_dist_env() {
    # Passing result to sh
    e="CCACHE_DIR='$SIPH_DEFAULT_CCACHE_DIR'"
    if [ -n "$http_proxy" ]; then
        e="http_proxy='$http_proxy' $e"
    fi
    if [ -n "$https_proxy" ]; then
        e="https_proxy='$https_proxy' $e"
    fi
    echo "$e"
}

siph_user_env() {
    # Passing result to sudo
    if [ -n "$CCACHE_DIR" ]; then
        e="CCACHE_DIR=$CCACHE_DIR"
    fi
    if [ -n "$http_proxy" ]; then
        e="http_proxy=$http_proxy $e"
    fi
    if [ -n "$https_proxy" ]; then
        e="https_proxy=$https_proxy $e"
    fi
    echo "$e"
}

siph_distcommand() {
    siph_msg "Chrooting into $SIPH_DIST_NAME"
    e=`siph_dist_env`
    chroot "$SIPH_DIST_ROOT"  /bin/sh -c "$e $1"
}

siph_tmpcommand() {
    siph_msg "Chrooting into $SIPH_TMP_ROOT"
    e=`siph_dist_env`
    chroot "$SIPH_TMP_ROOT" /bin/sh -c "$e $1"
}


siph_dist_setup() {
    r="$1"

    mount -o bind /proc "$r/proc"

    if [ -d "$SIPH_PKGDIR" ]; then
        mkdir -p "$r/siph-pkg"
        mount -o bind,ro "$SIPH_PKGDIR" "$r/siph-pkg"
    fi

    if [ -d "$SIPH_CCACHE_DIR" ]; then
        mkdir -p "$r/$SIPH_DEFAULT_CCACHE_DIR"
        mount -o bind "$SIPH_CCACHE_DIR" "$r/$SIPH_DEFAULT_CCACHE_DIR"
    fi

    cp "$SIPH_SCRIPT" "$r"
}

siph_dist_teardown() {
    r="$1"

    umount "$r/proc"

    if [ -d "$r/siph-pkg" ]; then
        umount "$r/siph-pkg"
    fi

    if [ -d "$r/$SIPH_DEFAULT_CCACHE_DIR" ]; then
        umount "$r/$SIPH_DEFAULT_CCACHE_DIR"
    fi
}

siph_src_rev () {
    git -C "$SIPH_BLD_SRCDIR" rev-parse HEAD
}

## COMMANDS ##

siph_tmpclone()
{
    siph_dist_root $@
    mkdir -p "$SIPH_ROOT/tmp"
    mkdir -p "$SIPH_ROOT/ccache"
    SIPH_TMP_ROOT="`mktemp -p "$SIPH_ROOT/tmp/" -d`/$SIPH_DIST_NAME"
    btrfs subvolume snapshot "$SIPH_DIST_ROOT" "$SIPH_TMP_ROOT" || siph_err "Could not clone '$SIPH_DIST_ROOT'"

    siph_dist_setup "$SIPH_TMP_ROOT"
}

siph_rmtmp()
{
    siph_dist_teardown "$1"
    btrfs subvolume delete "$1"
    rmdir `dirname "$1"`
}

siph_tmpclean()
{
    for t in $SIPH_ROOT/tmp/*; do
        siph_rmtmp $t/*
    done
}


siph_update()
{
    for SIPH_DIST_ROOT in $SIPH_ROOT/dists/*; do
        siph_distcommand "apt-get update && apt-get -yudist-upgrade"
    done
}


siph_distinstall()
{
    siph_dist_root $@; shift;
    siph_distcommand "apt-get install $*"
}


siph_mkdist()
{
    SIPH_TYPE="$1"; shift
    SIPH_RELEASE="$1"; shift
    if test -z "$1"; then
        SIPH_DIST_NAME="${SIPH_TYPE}_${SIPH_RELEASE}"
    else
        SIPH_DIST_NAME="$1";shift
    fi
    siph_dist_root "$SIPH_DIST_NAME"
    siph_msg "Creating '$SIPH_TYPE' '$SIPH_RELEASE' as '$SIPH_DIST_NAME'"

    #SIPH_MIRROR="$1"
    mkdir -p "$SIPH_ROOT/dists"
    btrfs subvolume create "$SIPH_DIST_ROOT" || siph_err "Could not create distribution volume"
    case $SIPH_TYPE in
        debian)
            echo debootstrap "$SIPH_RELEASE" "$SIPH_DIST_ROOT" "$SIPH_MIRROR_DEBIAN"
            debootstrap "$SIPH_RELEASE" "$SIPH_DIST_ROOT" "$SIPH_MIRROR_DEBIAN"
            ;;
        ubuntu)
            debootstrap "$SIPH_RELEASE" "$SIPH_DIST_ROOT" "$SIPH_MIRROR_UBUNTU"
            ;;
        *)
            siph_error "Unknown distribution type: $SIPH_TYPE"
            ;;
    esac
}

siph_cpdist() {
    btrfs subvolume snapshot "$SIPH_ROOT/dists/$1" "$SIPH_ROOT/dists/$2" || \
        siph_err "Could not copy dist"
}

siph_rmdist()
{
    siph_dist_root $@
    btrfs subvolume delete "$SIPH_DIST_ROOT"
}

siph_mvdist()
{
    siph_cpdist $@ && siph_rmdist "$1"
}


siph_lsdist() {
    ls $@ "$SIPH_ROOT/dists"
}

siph_shdist() {
    siph_dist_root $@; shift;
    siph_dist_setup "$SIPH_DIST_ROOT"
    sh -c "`siph_dist_env` chroot \"$SIPH_DIST_ROOT\" /bin/bash"
    siph_dist_teardown "$SIPH_DIST_ROOT"
}


siph_list_deps() {
    for d in $SIPH_PKG_DEPS_SIPH; do
        "$0" -r deps "$d"
        echo "$d"
    done

}

siph_cmd_deps () {
    SIPH_OPT_QUIET=yes
    siph_bld_source "$1"
    siph_bld_fetch
    if [ xyes = "x$SIPH_OPT_RECURSIVE" ] ; then
        siph_list_deps | sort | uniq
    else
        siph_list_deps
    fi
}

## Build Wrapers

siph_bld_deps() {
    siph_msg "DEPS"
    siph_pkg_deps || siph_err "Package dependencies failed"
}

siph_bld_fetch() {
    siph_msg "FETCH"
    siph_pkg_fetch || siph_err "Package fetch failed"
}

siph_bld_configure() {
    siph_msg "CONFIGURE"
    cd "$SIPH_BLD_BUILDDIR" && \
        siph_pkg_configure || \
            siph_err "Package configure failed"
}

siph_bld_compile() {
    siph_msg "COMPILE"
    cd "$SIPH_BLD_BUILDDIR" && \
        siph_pkg_compile || \
            siph_err "Package compile failed"
}

siph_bld_test() {
    siph_msg "TEST"
    cd "$SIPH_BLD_BUILDDIR" && \
        siph_pkg_test || \
            siph_err "Package test failed"
}


siph_install_dir() {
    if test '!' -d "/$1"; then
        mkdir -v "/$1"
        echo "/$1" >> "$SIPH_BLD_DBDIR/newdirs"
    fi
}

siph_install_file() {
    dir=`dirname "$1"`
    siph_install_dir "$dir"
    cp -a --no-preserve=ownership "$1" "/$1"
    echo "/$1" >> "$SIPH_BLD_DBDIR/newfiles"
}

siph_install_oldstuff () {
    # args: old_files new_files
    diff "$1" "$2" | grep '^<' | sed 's/^< //'
}

siph_bld_install() {
    siph_msg "INSTALL"
    # if test -d "$SIPH_BLD_DESTDIR"; then
    #     siph_err "Destination directory '$SIPH_BLD_DESTDIR' already exists"
    # fi
    siph_su mkdir -p "$SIPH_BLD_DESTDIR"

    cd "$SIPH_BLD_BUILDDIR" && \
        siph_pkg_install \
            || siph_err "Package install failed"

}

siph_bld_merge() {
    # Record files
    siph_su mkdir -p "$SIPH_BLD_DBDIR"

    # TODO: handle merging over installed package
    # TODO: track created directories

    ## install into filesystem
    siph_msg "Installing new files"
    siph_su touch "$SIPH_BLD_DBDIR/newfiles"
    siph_su touch "$SIPH_BLD_DBDIR/newdirs"
    siph_su touch "$SIPH_BLD_DBDIR/newversion"
    cd "$SIPH_BLD_DESTDIR" || siph_err "No destdir"
    find . | sed -e 's!^./!!' | ( \
            while read -r file; do \
                if test -d "$file"; then \
                    siph_install_dir "$file"; \
                else  \
                    siph_install_file "$file"; \
                fi ; \
            done \
        )

    ## Remove old files
    siph_msg "Removing previous files"
    if [ -f "$SIPH_BLD_DBDIR/files" ]; then
        siph_install_oldstuff "$SIPH_BLD_DBDIR/files" "$SIPH_BLD_DBDIR/newfiles" | \
            siph_xargs rm -v
    fi

    ## TODO: handle this better
    # if [ -f "$SIPH_BLD_DBDIR/dirs" ]; then
    #     siph_install_oldstuff "$SIPH_BLD_DBDIR/dirs" "$SIPH_BLD_DBDIR/newdirs" | tac | \
    #         siph_xargs rmdir -v
    # fi


    ## ldconfig
    siph_ldconfig

    ## Record installation
    siph_su cp "$SIPH_FILE" "$SIPH_BLD_DBDIR/siph"
    siph_src_rev >> "$SIPH_BLD_DBDIR/newversion"
    siph_su mv "$SIPH_BLD_DBDIR/newversion" "$SIPH_BLD_DBDIR/version"
    siph_su mv "$SIPH_BLD_DBDIR/newfiles" "$SIPH_BLD_DBDIR/files"
    siph_su mv "$SIPH_BLD_DBDIR/newdirs" "$SIPH_BLD_DBDIR/dirs"

    rm -r "$SIPH_BLD_WORKDIR"
}

siph_bld_clean() {
    siph_msg "CLEAN"
    cd "$SIPH_BLD_BUILDDIR" && \
        siph_pkg_clean || \
            siph_err "Package install failed"
}

siph_su_fetch() {
    siph_su "$0" pkg "$SIPH_SPEC" fetch
}

siph_su_configure() {
    siph_su "$0" pkg "$SIPH_SPEC" configure
}

siph_su_compile() {
    siph_su "$0" pkg "$SIPH_SPEC" compile
}

siph_su_test() {
    siph_su "$0" pkg "$SIPH_SPEC" test
}

siph_su_install() {
    siph_su "$0" pkg "$SIPH_SPEC" install
}

siph_su_clean() {
    siph_su "$0" pkg "$SIPH_SPEC" clean
}

siph_bld_source() {
    if test -z "$1"; then
        return;
    fi

    # Locate file
    SIPH_SPEC="$1"; shift;
    repo_base=""
    if test -f "$SIPH_SPEC/.siph"; then
        # Explicit repo
        SIPH_FILE="$SIPH_SPEC/.siph"
        SIPH_BLD_SRCDIR=`realpath "$SIPH_SPEC"`
        SIPH_BLD_BUILDDIR=`realpath "$SIPH_SPEC"`
    elif (echo "$SIPH_SPEC" |  grep 'https\?:\/\/.*' > /dev/null); then
        # Remote Repo
        siph_msg "Syncing repo '$SIPH_SPEC'"
        repo_base=`echo "$SIPH_SPEC" | sed -e 's!.*/\([^/.]*\)\(.git\)\?!\1!'`
        siph_su mkdir -p "$SIPH_REPODIR"
        if [ yes = "$SIPH_OPT_FETCH" ]; then
            if test -e "$SIPH_REPODIR/$repo_base"; then
                cd "$SIPH_REPODIR/$repo_base" && \
                    siph_su_git pull || siph_err "Could not pull"
            else
                cd "$SIPH_REPODIR" && \
                    siph_su_git clone "$SIPH_SPEC" || siph_err "Could not clone repo"
            fi
        fi
        SIPH_BLD_SRCDIR="$SIPH_REPODIR/$repo_base"
        SIPH_BLD_BUILDDIR="$SIPH_REPODIR/$repo_base"
        SIPH_FILE="$SIPH_BLD_SRCDIR/.siph"
    else
        # Package name
        # Search package path for file
        rest="$SIPH_PKGDIR"
        while test "x" != "x$rest" -a '!' -f "$SIPH_FILE"; do
            first=`echo $rest | sed -e 's/^:\?\([^:]*\)\(:\(.*\)\)\?/\1/'`
            rest=`echo $rest  | sed -e 's/^:\?\([^:]*\)\(:\(.*\)\)\?/\2/'`
            SIPH_FILE="$first"/"$SIPH_SPEC".siph
        done
        SIPH_BLD_SRCDIR="$SIPH_REPODIR/$SIPH_SPEC"
        SIPH_BLD_BUILDDIR="$SIPH_REPODIR/$SIPH_SPEC"
    fi

    # Did we find it?
    if test '!' -f "$SIPH_FILE"; then
       siph_err "Could not find package $SIPH_SPEC"
    fi

    # Canonicalize path
    SIPH_FILE=`realpath "$SIPH_FILE"`

    siph_msg "FILE: '$SIPH_FILE'"
    . "$SIPH_FILE" || siph_err "Could not source '$SIPH_FILE'"

    test -n "$SIPH_PKG_NAME" || siph_err "No package name"
    test -n "$SIPH_PKG_REPO" || siph_err "No package repo"
    test -n "$SIPH_PKG_BRANCH" || siph_err "No package branch"

    if test -n "$repo_base"; then
        test "x$repo_base" = "x$SIPH_PKG_NAME" || \
            siph_err "Mismatched repo basename ($repo_base) and package name ($SIPH_PKG_NAME)"
    fi

    SIPH_BLD_PREFIX="$SIPH_PREFIX"
    SIPH_BLD_WORKDIR="$SIPH_WORKDIR/$SIPH_PKG_NAME"
    SIPH_BLD_DESTDIR="$SIPH_BLD_WORKDIR/dest"
    SIPH_BLD_DBDIR="$SIPH_DBDIR/$SIPH_PKG_NAME"
}

siph_testpkg() {
    siph_bld_source $@
    siph_bld_deps
    siph_su_fetch
    siph_su_configure
    siph_su_compile
    siph_su_test
}

siph_testroot() {
    # clone the distro
    siph_tmpclone $@ || siph_err "Could not clone distro"
    shift

    # get sources in original root
    siph_bld_source $@
    here=`pwd`
    siph_bld_fetch
    cd "$here"

    # clone sources to tmp
    siph_msg "srcdir: $SIPH_BLD_SRCDIR"
    mkdir -p "${SIPH_TMP_ROOT}/${SIPH_DEFAULT_REPODIR}"
    siph_git clone "$SIPH_BLD_SRCDIR" "${SIPH_TMP_ROOT}/${SIPH_DEFAULT_REPODIR}/${SIPH_PKG_NAME}"

    # Chroot and test
    siph_msg "Chrooting into temporary $SIPH_DIST_NAME"
    # TODO: this looks gross
    if [ -f "$SIPH_BLD_SRCDIR/.siph" ]; then
        # native siph package
        siph_tmpcommand "/siph -F test ${SIPH_DEFAULT_REPODIR}/${SIPH_PKG_NAME}"
    else
        # using specific siph file
        siph_tmpcommand "/siph -F test $@"
    fi

    siph_rmtmp "$SIPH_TMP_ROOT"
}

siph_test() {
    if [ "$#" = 1 ]; then
        # test in current root
        siph_testpkg "$1"
    else
        # test in chroot
        siph_testroot $@
    fi

}


siph_uninstall() {
    siph_msg "UNINSTALL"

    SIPH_PKG_NAME="$1"
    SIPH_BLD_DBDIR="$SIPH_DBDIR/$SIPH_PKG_NAME"

    if test -d "$SIPH_BLD_DBDIR"; then
        . "$SIPH_BLD_DBDIR/siph"
    else
        siph_err "package '$SIPH_PKG_NAME' not installed"
    fi

    # Remove files
    siph_xargs rm -v < "$SIPH_BLD_DBDIR/files"
    tac "$SIPH_BLD_DBDIR/dirs" | siph_xargs rmdir -v

    # Remove package entry
    rm -r "$SIPH_BLD_DBDIR"
}


siph_install()
{
    siph_bld_source "$1"
    new_version=`siph_src_rev`

    if [ -d "$SIPH_BLD_DBDIR" -a -f "$SIPH_BLD_DBDIR/version" ]; then
        read old_version < "$SIPH_BLD_DBDIR/version"
        if test "x$new_version" = "x$old_version"; then
            siph_msg "Package '$SIPH_PKG_NAME', revision '$new_version' already installed"
            return 0
        fi
    fi

    # build and install
    siph_bld_deps
    siph_su_fetch
    siph_su_configure
    siph_su_compile
    siph_su_test
    siph_su_install
    siph_bld_merge


}

siph_installbase() {
    siph_apt_install $SIPH_DEPS_DEB_BASE
}


siph_pkg() {
    siph_bld_source "$1"; shift
    for subcmd in $@; do
        case "$subcmd" in
            fetch)
                siph_bld_fetch
                ;;
            deps)
                siph_bld_deps
                ;;
            configure)
                siph_bld_configure
                ;;
            compile)
                siph_bld_compile
                ;;
            test)
                siph_bld_test
                ;;
            install)
                siph_bld_install
                ;;
            merge)
                siph_bld_merge
                ;;
            clean)
                siph_bld_clean
                ;;
            *)
                siph_err "Unrecognized pkg command: '$subcmd'"
                ;;
        esac
    done
}


## Portability Functions

siph_ldconfig () {
    if [ -f "`which ldconfig`" ]; then
        ldconfig
    fi
}

siph_su() {
    e="SIPH_OPT_FETCH=$SIPH_OPT_FETCH"
    if [ -z "$SIPH_OPT_USER" ] ; then
        sh -c "$e $*" || siph_err "subcommand '$*' failed"
    else
        su "$SIPH_OPT_USER" -c "$e $*" || siph_err "su subcommand '$*'"
    fi
}

siph_git() {
    c="$1"; shift
    if [ yes = "$SIPH_OPT_QUIET" ] ; then
        git "$c" -q $@ || siph_err "Git failed"
    else
        git "$c" $@ || siph_err "Git failed"
    fi
}

siph_su_git() {
    c="$1"; shift
    if [ yes = "$SIPH_OPT_QUIET" ] ; then
        siph_su git "$c" -q $@ || siph_err "Git failed"
    else
        siph_su git "$c" $@ || siph_err "Git failed"
    fi
}


siph_proxy_setup() {
    if [ -n "$http_proxy" ]; then
        export http_proxy
    fi
    if [ -n "$https_proxy" ]; then
        export https_proxy
    fi
}

siph_apt_get () {
    if test -n `which apt-get` ; then
        if test 0 = `id -u`; then
            ( siph_proxy_setup && apt-get $@ )
        else
            echo "Not root, skipping apt-get install"
        fi
    fi
}

siph_apt_install () {
    siph_apt_get update
    siph_apt_get -y install $@
}

SIPH_DEPS_DEB_BASE="build-essential git curl autoconf autoconf-archive automake libtool ccache cmake sbcl"


siph_find_quicklisp ()
{
    if test -d "$HOME/quicklisp"; then
        SIPH_QUICKLISP="$HOME/quicklisp"
    elif test -d "$HOME/.quicklisp"; then
        SIPH_QUICKLISP="$HOME/.quicklisp"
    elif test -d "$HOME/Quicklisp"; then
        SIPH_QUICKLISP="$HOME/Quicklisp"
    elif test -d "$SIPH_PREFIX/quicklisp"; then
        SIPH_QUICKLISP="$SIPH_PREFIX/quicklisp"
    fi

}

siph_curl ()
{
    # subshell
    ( siph_proxy_setup && curl $@ ) || \
        siph_err "Could not run curl"
}

siph_install_quicklisp () {
    siph_find_quicklisp
    if test '!' -e "$SIPH_QUICKLISP"; then
        file=`tempfile`
        siph_curl -o "$file" "https://beta.quicklisp.org/quicklisp.lisp" || siph_err "Could not fetch quicklisp"
        if [ -n "$http_proxy" ]; then
            ql_proxy=":proxy \"$http_proxy\""
        else
            ql_proxy=""
        fi
        siph_su sbcl --script <<EOF
(load "$file")
(quicklisp-quickstart:install :path "$SIPH_PREFIX/quicklisp" $ql_proxy)
EOF
        rm "$file"
    fi
    siph_find_quicklisp
}

## Package Helpers

siph_deps_deb()
{
    siph_apt_install $SIPH_PKG_DEPS_DEB $SIPH_DEPS_DEB_BASE
}

siph_deps_siph() {
    for dep in $SIPH_PKG_DEPS_SIPH; do
        # install via clean subprocess
        "$0" install "$dep" || siph_err "Could not install dependency '$dep'"
    done
}


## Build Stubs

SIPH_PKG_BRANCH="master"

siph_pkg_fetch() {
    # SIPH_BLD_SRCDIR=`pwd`
    # SIPH_BLD_BUILDDIR=`pwd`
    true
}

siph_pkg_deps()
{
    siph_deps_deb
    siph_deps_siph
}

siph_pkg_configure()
{
    if test -f "$SIPH_BLD_SRCDIR/configure.ac"; then
        autoreconf -i && "$SIPH_BLD_SRCDIR/configure" --prefix="$SIPH_BLD_PREFIX"
    elif test -f "$SIPH_BLD_SRCDIR/CMakeLists.txt"; then
        cmake "$SIPH_BLD_SRCDIR" -DCMAKE_INSTALL_PREFIX="$SIPH_BLD_PREFIX"
    fi
}

siph_pkg_compile()
{
    if test -f Makefile; then
        make -j "$SIPH_MAKE_J"
    fi
}

siph_pkg_test() {
    if test -f "$SIPH_BLD_SRCDIR/configure.ac" -a -f "Makefile"; then
        make check
    elif test -f "$SIPH_BLD_SRCDIR/CMakeLists.txt" -a -f "Makefile"; then
        make test
    fi
}

siph_pkg_install()
{
    echo bif
    pwd
    if [ -f Makefile ] ; then
        echo foo
        make install DESTDIR="$SIPH_BLD_DESTDIR"
    fi
}

siph_pkg_clean()
{
    if [ -f Makefile ] ; then
        make clean
    fi
}


## Build Helpers
siph_fetch_git () {
    repo="$SIPH_REPODIR/$SIPH_PKG_NAME"
    if [ -d "$repo"  ]; then
        # TODO: check if repo URL has changed
        if [ "x$SIPH_OPT_FETCH" = xyes ]; then
            siph_msg "Updating '$repo'"
            cd "$repo" && \
                siph_su_git fetch || siph_err "Could not update repo"
        fi
    else
        siph_msg "Cloning '$SIPH_PKG_REPO'"
        siph_su_git clone "$SIPH_PKG_REPO" "$repo" || siph_err "Could not clone '$SIPH_PKG_REPO"
    fi
    cd "$repo" && siph_su_git checkout "$SIPH_PKG_BRANCH" || siph_err "Could not checkout '$SIPH_PKG_BRANCH'"

    SIPH_BLD_SRCDIR="$repo"
    SIPH_BLD_BUILDDIR="$repo"
}



## Config files ##

siph_load_conf()
{
    if test -f "$1"; then
        . "$1"
    fi
}



## DISPATCH ##


siph_dispatch () {
    siph_load_conf /etc/siph/config
    siph_load_conf ~/.config/siph
    siph_load_conf ~/.siph/config



    SIPH_CMD="$1"; shift

    if [ -z "$SIPH_CMD" ] ; then
        siph_err "No command given"
    fi

    case "$SIPH_CMD" in
        mkdist)
            siph_mkdist $@
            ;;
        cpdist)
            siph_cpdist $@
            ;;
        rmdist)
            siph_rmdist $@
            ;;
        mvdist)
            siph_mvdist $@
            ;;
        lsdist)
            siph_lsdist $@
            ;;
        sh)
            siph_shdist $@
            ;;
        update)
            siph_update $@
            ;;
        distinstall)
            siph_distinstall $@
            ;;
        tmp)
            siph_tmpclone $@
            ;;
        rmtmp)
            siph_rmtmp $@
            ;;
        clean)
            siph_tmpclean $@
            ;;
        pkg)
            siph_pkg $@
            ;;
        test)
            siph_test $@
            ;;
        install)
            siph_install $@
            ;;
        installbase)
            siph_installbase $@
            ;;
        uninstall)
            siph_uninstall $@
            ;;
        deps)
            siph_cmd_deps $@
            ;;
        nop)
            true
            ;;
        help)
            echo "Usage: siph COMMAND"
            echo ""
            echo "  DISTRIBUTION MANAGEMENT:"
            echo "  ======================="
            echo "    siph mkdist OS RELEASE [DISTRIBUTION]"
            echo "        Create a root directory tree"
            echo "    siph rmdist DISTRIBUTION"
            echo "        Delete a root directory tree"
            echo "    siph cpdist SOURCE_DISTRIBUTION DEST_DISTRIBUTION"
            echo "        Copy a distribution"
            echo "    siph mvdist SOURCE_DISTRIBUTION DEST_DISTRIBUTION"
            echo "        Rename a distribution"
            echo "    siph lsdist"
            echo "        List distributions"
            echo "    siph sh DISTRIBUTION"
            echo "        Start interative shell in DISTRIBUTION"
            echo "    siph update DISTRIBUTION"
            echo "        Update a root directory tree"
            echo "    siph distinstall DISTRIBUTION packages..."
            echo "        Install packages in a root directory tree"
            echo "    siph tmp DISTRIBUTION"
            echo "        Create a temporary clone of a root tree"
            echo "    siph rmtmp PATH"
            echo "        Remove temporary clone"
            echo "    siph clean"
            echo "        Remove all temporary root clones"
            echo ""
            echo "  PACKAGE TESTING:"
            echo "  ================"
            echo "    siph test [DISTRIBUTION] PACKAGE"
            echo "        Build and test PACKAGE, optionally in DISTRIBUTION"
            echo ""
            echo "  PACKAGE MANAGEMENT:"
            echo "  ==================="
            echo "    siph install PACKAGE"
            echo "        Install PACKAGE"
            echo "    siph installbase"
            echo "        Install base siph packages"
            ;;
        *)
            siph_err "Invalid Command '$SIPH_CMD'"
            ;;
    esac
}

# echo "ARGS ($#): $@"

while true; do
    case "$1" in
        -r)
            SIPH_OPT_RECURSIVE=yes
            shift;
            ;;
        -F)
            SIPH_OPT_FETCH=no
            shift;
            ;;
        -u)
            SIPH_OPT_USER="$2"
            HOME=`eval echo ~$SIPH_OPT_USER`
            shift;
            shift;
            ;;
        -s)
            shift
            e=`siph_user_env`
            exec sudo $e "$0" -u `id -un` "$*"
            ;;
        *)
            siph_dispatch $@
            exit;
            ;;
    esac
done
