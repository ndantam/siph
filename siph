#!/bin/sh

## VARS ##

SIPH_ROOT=/var/cache/siph
SIPH_MIRROR_DEBIAN=https://mirrors.kernel.org/debian
SIPH_MIRROR_UBUNTU=http://archive.ubuntu.com/ubuntu/
SIPH_SCRIPT="$0"
SIPH_REPODIR=~/.siph/repo
SIPH_WORKDIR=~/.siph/work

SIPH_MAKE_J=2

## HELPERS ##

siph_err()  {
    echo "SIPH ERROR: $1"
    exit 1
}

siph_msg() {
    echo "SIPH: $1"
}

siph_debug() {
    echo "SIPH DEBUG: $1"
}

siph_dist_root() {
    SIPH_TYPE="$1"; shift
    SIPH_RELEASE="$1"; shift
    SIPH_DIST_ROOT="$SIPH_ROOT/dists/${SIPH_TYPE}_${SIPH_RELEASE}"
    SIPH_TMP_ROOT="$SIPH_ROOT/tmp/${SIPH_TYPE}_${SIPH_RELEASE}"
}


siph_distcommand() {
    chroot "$SIPH_DIST_ROOT" /bin/sh -c "$1"
}

## COMMANDS ##


siph_tmpclone()
{
    siph_dist_root $@
    if [ -d "$SIPH_TMP_ROOT" ] ; then
        siph_err "ERROR: tmp directory '$SIPH_TMP_ROOT' already exists"
    fi
    mkdir -p "$SIPH_ROOT/tmp"
    btrfs subvolume snapshot "$SIPH_DIST_ROOT" "$SIPH_TMP_ROOT"
    mount -o bind /proc "$SIPH_TMP_ROOT/proc"
    cp "$SIPH_SCRIPT" "$SIPH_TMP_ROOT"
    echo "$SIPH_TMP_ROOT"
}

siph_tmpclean()
{
    for SIPH_TMP_ROOT in $SIPH_ROOT/tmp/*; do
        if [ -d "$SIPH_TMP_ROOT" ] ; then
            umount "$SIPH_TMP_ROOT/proc"
            btrfs subvolume delete "$SIPH_TMP_ROOT"
        fi
    done
}

siph_rmdist()
{
    siph_dist_root $@
    btrfs subvolume delete "$SIPH_DIST_ROOT"
}


siph_update()
{
    for SIPH_DIST_ROOT in $SIPH_ROOT/dists/*; do
        siph_distcommand "apt-get update && apt-get -yudist-upgrade"
    done
}


siph_distinstall()
{
    siph_dist_root $@; shift; shift;
    siph_distcommand "apt-get install $@"
}


siph_mkdist()
{
    siph_dist_root $@; shift; shift;
    SIPH_MIRROR="$1"
    mkdir -p "$SIPH_ROOT/dists"
    btrfs subvolume create "$SIPH_DIST_ROOT"
    case $SIPH_TYPE in
        debian)
            debootstrap "$SIPH_RELEASE" "$SIPH_DIST_ROOT" "$SIPH_MIRROR_DEBIAN"
            ;;
        ubuntu)
            debootstrap "$SIPH_RELEASE" "$SIPH_DIST_ROOT" "$SIPH_MIRROR_UBUNTU"
            ;;
        *)
            siph_error "Unknown distribution type: $SIPH_TYPE"
            ;;
    esac
}


siph_do_pkg_deps() {
    siph_msg "DEPS"
    siph_pkg_deps || siph_err "Package dependencies failed"
}

siph_do_pkg_fetch() {
    siph_msg "FETCH"
    siph_pkg_fetch || siph_err "Package fetch failed"
}

siph_do_pkg_configure() {
    siph_msg "CONFIGURE"
    siph_pkg_configure || siph_err "Package configure failed"
}

siph_do_pkg_compile() {
    siph_msg "COMPILE"
    siph_pkg_compile || siph_err "Package compile failed"
}

siph_do_pkg_test() {
    siph_msg "TEST"
    siph_pkg_test || siph_err "Package compile failed"
}

siph_do_pkg_install() {
    siph_msg "INSTALL"
    siph_pkg_install || siph_err "Package install failed"
}

siph_do_source() {
    SIPH_FILE="$1"; shift
    . "$SIPH_FILE" || siph_err "Could not source '$SIPH_FILE'"
    siph_check_pkg
}

siph_testpkg() {
    SIPH_FILE="$1"; shift
    siph_do_source "$SIPH_FILE"
    siph_do_pkg_deps
    siph_do_pkg_fetch
    siph_do_pkg_configure
    siph_do_pkg_compile
    siph_do_pkg_test
}

siph_testrepo() {
    siph_tmpclone $@; shift; shift;
    SIPH_REPO="$1"; shift

    if test -z "$1"; then
        WORK_SUBDIR="/tmp/siph-repo"
    else
        true
    fi

    WORKDIR="$SIPH_TMP_ROOT/$WORK_SUBDIR"

    siph_msg "Cloning rep '$SIPH_REPO' to '$WORKDIR'"
    git clone $SIPH_REPO "$WORKDIR"
    chroot "$SIPH_TMP_ROOT" /bin/sh -c "cd $WORK_SUBDIR && /siph pkg ./.siph"

    siph_tmpclean
}


siph_install()
{
    # Locate file
    SPEC="$1"
    if test -f "$SPEC"; then
        SIPH_FILE="$SPEC"
    else
        rest="$SIPH_PKG_ROOT"
        while test "x" != "x$rest" -a '!' -f "$SIPH_FILE"; do
            first=`echo $rest | sed -e 's/^:\?\([^:]*\)\(:\(.*\)\)\?/\1/'`
            rest=`echo $rest  | sed -e 's/^:\?\([^:]*\)\(:\(.*\)\)\?/\2/'`
            SIPH_FILE="$first"/"$SPEC".siph
        done
    fi
    #siph_msg "$SIPH_FILE"
    if test '!' -f "$SIPH_FILE"; then
       siph_err "Could not find package $SPEC"
    fi

    # build and install
    siph_testpkg "$SIPH_FILE"
    siph_do_pkg_install

    # (echo "> SIPH DEPS" && siph_pkg_deps) &&
    #     echo "> SIPH FETCH" && \
    #     siph_pkg_fetch && \
    #     echo "> SIPH CONFIGURE" && \
    #     siph_pkg_configure && \
    #     echo "> SIPH COMPILE" && \
    #     siph_pkg_compile && \
    #     echo "> SIPH TEST" && \


}


## Portability Functions

siph_apt_get () {
    if test -n `which apt-get` ; then
        if test 0 = `id -u`; then
            apt-get $@
        else
            echo "Not root, skipping apt-get install"
        fi
    fi
}

## Build Stubs

SIPH_PKG_BRANCH="master"

siph_pkg_fetch() {
    SIPH_SRCDIR='.'
    SIPH_BUILDDIR='.'
}

siph_pkg_deps() { true; }

siph_pkg_configure() { true; }

siph_pkg_compile() { true; }

siph_pkg_test() { true; }

siph_pkg_install() { true; }


## Build Helpers

siph_check_pkg() {
    test -n "$SIPH_PKG_NAME" || siph_err "No package name"
    test -n "$SIPH_PKG_REPO" || siph_err "No package repo"
    test -n "$SIPH_PKG_BRANCH" || siph_err "No package branch"
}

siph_workdir () {
    mkdir -p
}

siph_fetch_git () {
    mkdir -p "$SIPH_REPODIR"
    repo="$SIPH_REPODIR/$SIPH_PKG_NAME"
    if [ -d "$repo" ]; then
        # TODO: check if repo URL has changed
        siph_msg "Updating '$repo'"
        cd "$repo"
        git fetch && git checkout "$SIPH_PKG_BRANCH"
    else
        siph_msg "Cloning '$SIPH_PKG_REPO'"
        git clone "$SIPH_PKG_REPO" "$repo" || siph_err "Could not clone '$SIPH_PKG_REPO"
        cd "$repo" && git checkout "$SIPH_PKG_BRANCH" || siph_err "Could not checkout '$SIPH_PKG_BRANCH'"
        SIPH_SRCDIR='.'
        SIPH_BUILDDIR='.'
    fi
}



## Config files ##

siph_load_conf()
{
    if test -f "$1"; then
        . "$1"
    fi
}


siph_load_conf /etc/siph
siph_load_conf /etc/siph/config
siph_load_conf ~/.config/siph
siph_load_conf ~/.siph/config


## DISPATCH ##
SIPH_CMD="$1"; shift

if [ -z "$SIPH_CMD" ] ; then
    siph_err "No command given"
fi



case "$SIPH_CMD" in
    mkdist)
        siph_mkdist $@
        ;;
    rmdist)
        siph_rmdist $@
        ;;
    update)
        siph_update $@
        ;;
    distinstall)
        siph_distinstall $@
        ;;
    tmp)
        siph_tmpclone $@
        ;;
    clean)
        siph_tmpclean $@
        ;;
    testpkg)
        siph_testpkg $@
        ;;
    testrepo)
        siph_testrepo $@
        ;;
    install)
        siph_install $@
        ;;
    help)
        echo "Usage: siph COMMAND"
        echo ""
        echo "    siph mkdist OS DISTRIBUTION"
        echo "        Create a root directory tree"
        echo "    siph rmdist OS DISTRIBUTION"
        echo "        Delete a root directory tree"
        echo "    siph update OS DISTRIBUTION"
        echo "        Update a root directory tree"
        echo "    siph distinstall OS DISTRIBUTION packages..."
        echo "        Install packages in a root directory tree"
        echo "    siph tmp OS DISTRIBUTION"
        echo "        Create a temporary clone of a root tree"
        echo "    siph clean"
        echo "        Remove all temporary root clones"
        echo "    siph testrepo OS DISTRIBUTION REPO"
        echo "        Build and test REPO in root"
        echo "    siph install PACKAGE"
        echo "        Install PACKAGE"
        ;;
    *)
        siph_err "Invalid Command '$SIPH_CMD'"
        ;;
esac
